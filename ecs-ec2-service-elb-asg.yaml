AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "Claudio Cordova"
Description: ""
Resources:
    ECSService:
        Type: "AWS::ECS::Service"
        #DependsOn: ElasticLoadBalancingV2TargetGroup
        Properties:
            ServiceName: poker-analyzer-service
            Cluster: !ImportValue ECSClusterName
            LoadBalancers: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                ContainerName: "poker-analyzer-service-container"
                ContainerPort: 8080
            DesiredCount: 2
            TaskDefinition: !ImportValue PokerAnalyzerTaskDefinitionArn
            DeploymentConfiguration: 
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker: 
                    Enable: true
                    Rollback: true
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            PlacementStrategies: 
              - 
                Type: "spread"
                Field: "attribute:ecs.availability-zone"
              - 
                Type: "spread"
                Field: "instanceId"
            HealthCheckGracePeriodSeconds: 15
            SchedulingStrategy: "REPLICA"
            DeploymentController: 
                Type: "ECS"
            #CapacityProviderStrategy: 
            #  - 
            #    CapacityProvider: "ec2-capacity-provider"
            #    Weight: 1
            #    Base: 0

    #ECSCapacityProvider:
    #    Type: "AWS::ECS::CapacityProvider"
    #    Properties:
    #        Name: "ec2-capacity-provider"
    #        AutoScalingGroupProvider: 
    #            AutoScalingGroupArn: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:fba13cb3-dcdb-4f13-ba2a-2256fe3288dd:autoScalingGroupName/ecs-ec2-cluster-stack-ECSInstanceAsg-JEJ6N45Y36RN"
    #            ManagedTerminationProtection: "DISABLED"
    #            ManagedScaling: 
    #                MaximumScalingStepSize: 10000
    #                MinimumScalingStepSize: 1
    #                Status: "ENABLED"
    #                TargetCapacity: 100

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "ecs-ec2-service-elb"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: !Split [",", !ImportValue DeploymentSubnetIds]
            SecurityGroups: 
              - !Ref ELBSecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ELBSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties: 
            GroupDescription: "ecs-ec2-service-elb-sg"
            GroupName: "ecs-ec2-service-elb-sg"
            VpcId: !ImportValue DeploymentVpcId
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"


    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        DependsOn: ElasticLoadBalancingV2LoadBalancer
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/health"
            Port: 8080
            Protocol: "HTTP"
            HealthCheckPort: "8080"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !ImportValue DeploymentVpcId
            Name: "ecs-ec2-service-elb-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.count"
                Value: "1"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "target_group_health.dns_failover.minimum_healthy_targets.percentage"
                Value: "off"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "use_load_balancer_configuration"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            #Targets: 
            #  - 
            #     Id: "i-08bdab7e197d4ad18"
            #    Port: 8080
            #  - 
            #    Id: "i-0b29f7500bb5ec5ba"
            #    Port: 8080

Outputs:
  #ClusterName:
  #  Description: The cluster used to create the service.
  #  Value: !Ref ECSClusterName
  ECSService:
    Description: The created service.
    Value: !Ref ECSService
  LoadBalancer:
    Description: The created load balancer.
    Value: !Ref ElasticLoadBalancingV2LoadBalancer