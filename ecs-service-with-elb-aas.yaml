AWSTemplateFormatVersion: 2010-09-09
Metadata:
    Generator: "Claudio Cordova"
Description: "The template used to create an ECS Service from the ECS Console."
#Parameters:
  #ECSClusterName:
  #  Type: String
  #  Default: 
  #    !ImportValue ECSClusterFargateName
  #SecurityGroupName:
  #  Type: CommaDelimitedList
  #  Default: poker-analyzer-service-sg
  #SubnetIDs:
  #  Type: CommaDelimitedList
  #  Default: 'subnet-08a1038c794770d81,subnet-05cfebbf1f0f35479'
  #VpcID:
  #  Type: String
  #  Default: vpc-05d652f2c36419caf
  #LoadBalancerName:
  #  Type: String
  #  Default: poker-api-elb-aas-service-elb
Resources:
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !ImportValue ECSClusterFargateName
      #TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/pokerhandanalyzerapi:4"
      TaskDefinition: !ImportValue PokerAnalyzerTaskDefinitionArn
      LaunchType: FARGATE
      ServiceName: poker-analyzer-service
      SchedulingStrategy: REPLICA
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: poker-analyzer-service-container
          ContainerPort: 8080
          LoadBalancerName: !Ref 'AWS::NoValue'
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: '60'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Split [",", !ImportValue DeploymentSubnetIds]
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - Listener
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: poker-analyzer-service-desc
      GroupName: poker-analyzer-service-sg
      VpcId: !ImportValue DeploymentVpcId
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          CidrIp: 0.0.0.0/0
        - FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          CidrIpv6: '::/0'
        - FromPort: 8080
          ToPort: 8080
          IpProtocol: TCP
          CidrIp: 0.0.0.0/0          
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Name: poker-analyzer-service-elb
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Split [",", !ImportValue DeploymentSubnetIds]
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /health
      Name: poker-analyzer-service-tg
      HealthCheckPort: 8080
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !ImportValue DeploymentVpcId
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  #ECSClusterId:
  #  Type: 'AWS::ECS::Cluster::ClusterName'
  #  Default: !ImportValue ECSClusterFargateName    
  AutoScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: '3'
      MinCapacity: '2'
      ResourceId: !Sub 
        - "service/${VariableToImport}/poker-analyzer-service"
        - VariableToImport: !ImportValue ECSClusterFargateName
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
    DependsOn:
      - ECSService
  AutoScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: poker-analyzer-service-policy
      PolicyType: TargetTrackingScaling
      ResourceId: !Sub 
        - "service/${VariableToImport}/poker-analyzer-service"
        - VariableToImport: !ImportValue ECSClusterFargateName
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        ScaleInCooldown: '300'
        ScaleOutCooldown: '300'
        TargetValue: '70'
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
Outputs:
  #ClusterName:
  #  Description: The cluster used to create the service.
  #  Value: !Ref ECSClusterName
  ECSService:
    Description: The created service.
    Value: !Ref ECSService
  LoadBalancer:
    Description: The created load balancer.
    Value: !Ref LoadBalancer
  Listener:
    Description: The created listener.
    Value: !Ref Listener
  TargetGroup:
    Description: The created target group.
    Value: !Ref TargetGroup
  AutoScalingTarget:
    Value: !Ref AutoScalingTarget
  AutoScalingPolicy:
    Value: !Ref AutoScalingPolicy

